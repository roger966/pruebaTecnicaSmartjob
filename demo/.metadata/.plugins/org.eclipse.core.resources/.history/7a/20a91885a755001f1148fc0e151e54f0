/**
 * 
 */
package co.com.crudSec.service;
import java.util.Date;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import co.com.crudSec.entity.Usuario;
import co.com.crudSec.repository.UsuarioRepository;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 * <b>Descripcion:</b> Clase UsuarioService que contiene toda la lógica necesaria para realizar su debido proceso de registro
 * @author roger
 *
 */
@Service
public class UsuarioService {

	@Autowired
    private UsuarioRepository usuarioRepository;
	
	private static final String EMAIL_REGEX = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
    private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);
    
    private static final String PASSWORD_REGEX = //"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])([A-Za-z\\d$@$!%*?&]|[^ ]){4,}$";
    											 " ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&#.$($)$-$_])[A-Za-z\\d$@$!%*?&#.$($)$-$_]{4,}$";
    //											 "^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{4,}$";
   // "^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{4,}$";
    private static final Pattern PASSWORD_PATTERN = Pattern.compile(PASSWORD_REGEX);
    
    /**
     * <b>Descripcion:</b> Método encargado de registrar un usuario con sus validaciones
     * @author roger
     *
     */
	public Usuario registrarUsuario(Usuario usuario) throws Exception  {
		if(usuario.getNombre().isEmpty() || usuario.getCorreo().isEmpty() || usuario.getContrasena().isEmpty()) {
			throw new Exception("No es posible registrar por falta de datos");
		}
		if(!validarCorreo(usuario.getCorreo())){
			throw new Exception("El correo no cumple con el formato requerido");
		}
		if(!validarPasword(usuario.getContrasena())){
			throw new Exception("La contraseña no cumple con el formato requerido");
		}
		usuario.setNombre(usuario.getNombre());
		usuario.setCorreo(usuario.getCorreo());
        usuario.setCreated(new Date());
        usuario.setModified(new Date());
        usuario.setLastLogin(new Date());
        usuario.setToken(UUID.randomUUID().toString()); 
		return usuarioRepository.save(usuario);
    }
	
	/**
	 * <b>Descripcion:</b> Método encargado de realizar la busqueda de correo, para evitar duplicidad
	 * @author roger
	 *
	 */
	public Optional<Usuario> buscarPorCorreo(String correo) {
        return usuarioRepository.findByCorreo(correo);
    }
	
	/**
	 * <b>Descripcion:</b> Método encargado de realizar la validación del correo
	 * @author roger
	 *
	 */
	public boolean validarCorreo(String correo) {
		if (correo == null || correo.isEmpty()) {
            return false;
        }
        Matcher matcher = EMAIL_PATTERN.matcher(correo);
        return matcher.matches();
	}
	
	public boolean validarPasword(String password) {
		if (password == null || password.isEmpty()) {
            return false;
        }
        Matcher matcher = PASSWORD_PATTERN.matcher(password);
        return matcher.matches();
	}
}
